type User {
    id: ID!
    name: String!
    email: String!
}

type SigninPayload {
    token: String!
    user: User!
}

type Vehicle {
    id: ID!
    createdAt: Timestamp
    name: String
    description: String
    owner: String!
    year: Int!
    ownedSince: Int!
    ownedTo: Int
    model: Model!
    generation: Generation!
    displacement: Float
    engineType: EngineType
    transmission: Transmission
    drivetrain: Drivetrain
    horsepower: Int
}

type Manufacturer {
    id: String!
    name: String!
}

type Model {
    id: String!
    name: String!
    market: Market
}

type Generation {
    id: String!
    name: String!
    yearFrom: Int
    yearTo: Int
}

scalar Timestamp

enum Market {
    JDM
    NORTH_AMERICA
    EUROPE
    ASIA
    AUSTRALIA
}

enum Drivetrain {
    FWD
    RWD
    AWD
}

enum EngineType {
    I2
    I3
    I4
    I5
    I6
    V6
    V8
    V10
    V12
    W10
    W16
    HYBRID
    ELECTRIC
}

enum Transmission {
    AT
    MT
}

input AuthData {
    email: String!
    password: String!
}

# The Root Query for the application
type Query {
    getUser: User

    getOwnVehicles: [Vehicle]
}

# The Root Mutation for the application
type Mutation {
    registerUser(name: String!, authProvider: AuthData!): User
    loginUser(auth: AuthData): SigninPayload

    createVehicle(name: String,
        description: String,
        year: Int!,
        ownedSince: Int!,
        ownedTo: Int,
        makeId: String!,
        modelId: String!,
        generationId: String!,
        displacement: Float,
        engineType: EngineType,
        transmission: Transmission,
        driveTrain: Drivetrain,
        horsepower: Int): String
}